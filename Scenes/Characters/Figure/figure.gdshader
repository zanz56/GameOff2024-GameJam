shader_type canvas_item;

uniform vec4 outline_color : source_color;
uniform float outline_cutoff = 0.93333;

void vertex() {
	// Called for every vertex the material is visible on.
}

void fragment() {

	float size_x = 2.0/float(textureSize(TEXTURE, 0).x);
	float size_y = 2.0/float(textureSize(TEXTURE, 0).y);
	vec4 sprite_color = texture(TEXTURE, UV);
	float alpha = -4.0 * sprite_color.a;
	alpha += texture(TEXTURE, UV + vec2(size_x, 0)).a;
	alpha += texture(TEXTURE, UV + vec2(-size_x, 0)).a;
	alpha += texture(TEXTURE, UV + vec2(0, size_y)).a;
	alpha += texture(TEXTURE, UV + vec2(0, -size_y)).a;
	vec4 final_color = mix(sprite_color, outline_color, clamp(alpha, 0.0, 1.0));
	if(sprite_color.a != 1.0 && UV.y< outline_cutoff ){
		COLOR = vec4(final_color.rgb, clamp(abs( alpha) + sprite_color.a, 0.0, 1.0));
	}else{
		//COLOR.a = 0.0;
	}

}

//void light() {
	// Called for every pixel for every light affecting the CanvasItem.
	// Uncomment to replace the default light processing function with this one.
//}
